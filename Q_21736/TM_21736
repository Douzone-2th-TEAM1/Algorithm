import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class TM_21736 {

  public static int N, M;
  public static char[][] matrix;
  public static boolean[][] visited;
  public static int dx[] = { 0, 1, 0, -1 };
  public static int dy[] = { 1, 0, -1, 0 };
  public static int count = 0;

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String[] NM = br.readLine().split(" ");
    N = Integer.parseInt(NM[0]);
    M = Integer.parseInt(NM[1]);

    matrix = new char[N][M];
    visited = new boolean[N][M];

    int ix = 0, iy = 0;
    for (int i = 0; i < N; i++) {
      String input = br.readLine();
      for (int j = 0; j < M; j++) {
        if (input.charAt(j) == 'I') {
          ix = i;
          iy = j;
        } else if (input.charAt(j) == 'X') {
          visited[i][j] = true;
        }
        matrix[i][j] = input.charAt(j);
      }
    }

    dfs(ix, iy);

    System.out.println(count == 0 ? "TT" : count);
  }

  public static void dfs(int ix, int iy) {
    if (visited[ix][iy]) {
      return;
    }
    visited[ix][iy] = true;

    if (matrix[ix][iy] == 'P') {
      count++;
    }
    for (int i = 0; i < dx.length; i++) {
      int moveX = ix + dx[i];
      int moveY = iy + dy[i];
      if (moveX >= 0 && moveX < N && moveY >= 0 && moveY < M) {
        dfs(moveX, moveY);
      }
    }
  }
}
